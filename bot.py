import requests
import time
import json

TOKEN = '001.3277213606.1546113568:1011921225'
BASE_URL = 'https://myteam.mail.ru/bot/v1'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
users_state = {}

# –í–æ–∑–º–æ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –ª–µ–∫—Ç–æ—Ä—ã
CITIES = ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç']
LECTORS = ['–¢—É—Ä–º–∞–Ω–æ–≤–∞ –î.–ê.', '–°–µ–∫—É–æ–≤–∞ –®.–ë.']

LINKS = {
    '–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ª–æ–≤': 'https://delicate-klepon-16140e.netlify.app/',
    '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'https://example.com/consultation',
    '–Ø–≤–∫–∞ –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä': 'https://comforting-torrone-5273b1.netlify.app/'
}

OPTIONS = list(LINKS.keys()) + ['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç']

def send_message(chat_id, text):
    url = f'{BASE_URL}/messages/sendText'
    params = {'token': TOKEN}
    data = {
        'chatId': chat_id,
        'text': text
    }
    requests.post(url, params=params, data=data)


def send_options(chat_id):
    options_list = '\n'.join(f"{i+1}. {opt}" for i, opt in enumerate(OPTIONS))
    send_message(chat_id, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Astana Orleu.–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:\n{options_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
    users_state[chat_id] = {'step': 'choose_option'}


def start_report(chat_id):
    users_state[chat_id] = {
        'step': 'choose_city',
        'data': {}
    }
    cities_list = '\n'.join(f"{i+1}. {c}" for i, c in enumerate(CITIES))
    send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:\n{cities_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞:")


def process_message(chat_id, text):
    state = users_state.get(chat_id)

    if not state:
        send_options(chat_id)
        return

    step = state['step']

    if step == 'choose_option':
        if text.isdigit() and 1 <= int(text) <= len(OPTIONS):
            selected = OPTIONS[int(text) - 1]
            if selected == '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç':
                start_report(chat_id)
            else:
                send_message(chat_id, f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {LINKS[selected]}")
                users_state.pop(chat_id, None)
        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")

    elif step == 'choose_city':
        data = state['data']
        if text.isdigit() and 1 <= int(text) <= len(CITIES):
            city = CITIES[int(text) - 1]
            data['city'] = city
            state['step'] = 'choose_lector'
            lectors_list = '\n'.join(f"{i+1}. {l}" for i, l in enumerate(LECTORS))
            send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ç–æ—Ä–∞:\n{lectors_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫—Ç–æ—Ä–∞:")
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞.")

    elif step == 'choose_lector':
        data = state['data']
        if text.isdigit() and 1 <= int(text) <= len(LECTORS):
            lector = LECTORS[int(text) - 1]
            data['lector'] = lector
            state['step'] = 'enter_date'
            send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –ª–µ–∫—Ç–æ—Ä: {lector}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–µ–º–∏–Ω–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –º–∞—è):")
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–µ–∫—Ç–æ—Ä–∞.")

    elif step == 'enter_date':
        data = state['data']
        data['date'] = text.strip()
        state['step'] = 'enter_start_sum'
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è (—Ç–≥):")

    elif step == 'enter_start_sum':
        data = state['data']
        if text.isdigit():
            data['start_sum'] = int(text)
            data['expenses'] = []
            state['step'] = 'enter_expense'
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–¢–∞–∫—Å–∏ –¥–æ –∑–∞–ª–∞: 960\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ '–≥–æ—Ç–æ–≤–æ'")
        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")

    elif step == 'enter_expense':
        data = state['data']
        if text.lower() == '–≥–æ—Ç–æ–≤–æ':
            total_expenses = sum(e[1] for e in data['expenses'])
            remainder = data['start_sum'] - total_expenses
            report_lines = [
                f"–≥. {data['city']}",
                f"–õ–µ–∫—Ç–æ—Ä: {data['lector']}",
                f"{data['date']}\n",
                f"–°—É–º–º–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è:\n{data['start_sum']} —Ç–≥\n",
                "–ó–∞—Ç—Ä–∞—Ç—ã:"
            ]
            for desc, amount in data['expenses']:
                report_lines.append(f"{desc}: {amount} —Ç–≥")
            report_lines.append(f"\n–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses} —Ç–≥")
            report_lines.append(f"–°—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–∞: {remainder} —Ç–≥")
            send_message(chat_id, '\n'.join(report_lines))
            users_state.pop(chat_id)
        else:
            if ':' in text:
                parts = text.split(':', 1)
                desc = parts[0].strip()
                amount_str = parts[1].strip().replace('—Ç–≥', '').strip()
                if amount_str.isdigit():
                    amount = int(amount_str)
                    data['expenses'].append((desc, amount))
                    send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {desc} ‚Äî {amount} —Ç–≥\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∑–∞—Ç—Ä–∞—Ç—É –∏–ª–∏ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                else:
                    send_message(chat_id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞'.")

def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    last_event_id = 0
    while True:
        updates = get_updates(last_event_id)
        events = updates.get("events", [])

        if events:
            for event in events:
                last_event_id = event["eventId"]
                if event["type"] == "newMessage":
                    chat_id = event["payload"]["chat"]["chatId"]
                    message = event["payload"].get("text", "")

                    print(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {message}")

                    process_message(chat_id, message)
        else:
            time.sleep(1)

def get_updates(last_event_id):
    url = f'{BASE_URL}/events/get'
    params = {
        'token': TOKEN,
        'lastEventId': last_event_id,
        'pollTime': 25
    }
    response = requests.get(url, params=params, timeout=30)
    return response.json()

if __name__ == '__main__':
    main()